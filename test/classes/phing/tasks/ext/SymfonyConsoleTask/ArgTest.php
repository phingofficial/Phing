<?php
/**
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This software consists of voluntary contributions made by many individuals
 * and is licensed under the LGPL. For more information please see
 * <http://phing.info>.
 */

declare(strict_types=1);

use PHPUnit\Framework\TestCase;

/**
 * Test class for Arg.
 * Generated by PHPUnit on 2012-02-13 at 12:02:17.
 */
class ArgTest extends TestCase
{
    /**
     * @var Arg
     */
    private $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp(): void
    {
        $this->object = new Arg();
    }

    /**
     * @return void
     *
     * @covers Arg::getName
     * @covers Arg::setName
     */
    public function testSetGetName(): void
    {
        $o = $this->object;
        $o->setName('foo');
        self::assertEquals('foo', $o->getName());
    }

    /**
     * @return void
     *
     * @covers Arg::getValue
     * @covers Arg::setValue
     */
    public function testSetGetValue(): void
    {
        $o = $this->object;
        $o->setValue('foo');
        self::assertEquals('foo', $o->getValue());
    }

    /**
     * @return void
     *
     * @covers Arg::getQuotes
     * @covers Arg::setQuotes
     */
    public function testGetQuotes(): void
    {
        $o = $this->object;
        $o->setQuotes(true);
        self::assertEquals(true, $o->getQuotes());
    }

    /**
     * @return void
     *
     * @covers Arg::__toString
     */
    public function testToStringWithQuotes(): void
    {
        $o = $this->object;
        $o->setName('name');
        $o->setValue('value');
        $o->setQuotes(true);

        self::assertEquals('--name="value"', '' . $o);
    }

    /**
     * @return void
     *
     * @covers Arg::__toString
     */
    public function testToStringWithoutQuotes(): void
    {
        $o = $this->object;
        $o->setName('name');
        $o->setValue('value');
        $o->setQuotes(false);

        self::assertEquals('--name=value', '' . $o);
    }

    /**
     * @return void
     *
     * @covers Arg::__toString
     */
    public function testToStringJustName(): void
    {
        $o = $this->object;
        $o->setName('name');
        $o->setQuotes(false);

        self::assertEquals('--name', '' . $o);
    }

    /**
     * @return void
     *
     * @covers Arg::__toString
     */
    public function testToStringJustValueWithoutQuotes(): void
    {
        $o = $this->object;
        $o->setValue('value');
        $o->setQuotes(false);

        self::assertEquals('value', '' . $o);
    }

    /**
     * @return void
     *
     * @covers Arg::__toString
     */
    public function testToStringJustValueWithQuotes(): void
    {
        $o = $this->object;
        $o->setValue('value');
        $o->setQuotes(true);

        self::assertEquals('"value"', '' . $o);
    }
}
